import { segmentsCrossingPolygon, haversineDistance, segmentsCrossingOrInsidePolygon } from '../src/utils/geometry';
import { point, lineString, polygon } from '@turf/helpers';
import booleanPointOnLine from '@turf/boolean-point-on-line';
const square = [[
  [0, 0],
  [4, 0],
  [4, 4],
  [0, 4],
  [0, 0],
]];

interface Segment {
  geometry: { coordinates: number[][] };
  id: number;
}

const segments: Segment[] = [
  {
    geometry: {
      coordinates: [
        [-1, 2],
        [2, 5],
      ]
    }, id: 1
  }, // starts outside, ends outside, crosses polygon twice
  {
    geometry: {
      coordinates: [
        [-1, 4],
        [0, 5],
      ]
    }, id: 2
  }, // starts outside, ends outside, does not cross polygon
  {
    geometry: {
      coordinates: [
        [-1, 1],
        [1, 3],
      ]
    }, id: 3
  }, // starts outside, ends inside
  {
    geometry: {
      coordinates: [
        [0, 1],
        [3, 4],
      ]
    }, id: 4
  }, // starts on the edge, ends on the edge
  {
    geometry: {
      coordinates: [
        [0, 0],
        [2, 2],
      ]
    }, id: 5
  }, // starts on the edge, ends inside
  {
    geometry: {
      coordinates: [
        [1, 0],
        [5, 4],
      ]
    }, id: 6
  }, // starts on the edge, ends outside, crosses polygon
  {
    geometry: {
      coordinates: [
        [4, 2],
        [6, 4],
      ]
    }, id: 7
  }, // starts on the edge, ends outside, does not cross polygon
  {
    geometry: {
      coordinates: [
        [2, 2],
        [3, 3],
      ]
    }, id: 8
  }, // starts inside, ends inside
  {
    geometry: {
      coordinates: [
        [4, 2],
        [2, 2],
      ]
    }, id: 9
  }, // starts on the edge, ends inside
];

test('segmentsCrossingPolygon filters correctly', () => {
  const res = segmentsCrossingPolygon(square, segments);
  expect(res.map((s) => s.id)).toEqual([1, 3, 6]);
});

test('segmentsCrossingOrInsidePolygon filters correctly', () => {
  const res = segmentsCrossingOrInsidePolygon(square, segments);
  expect(res.map((s) => s.id)).toEqual([4, 5, 8, 9]);
});

test('haversineDistance gives reasonable result', () => {
  const dist = haversineDistance(0, 0, 0, 1);
  expect(Math.round(dist)).toBe(111195);
});
import { segmentPolygonIntersections } from '../src/utils/geometry';

test('segmentPolygonIntersections returns boundary points', () => {
  const ints = segmentPolygonIntersections(square, segments[0].geometry.coordinates);
  expect(ints).toEqual([
    [0, 3],
    [1, 4],
  ]);
  const inside = segmentPolygonIntersections(square, segments[7].geometry.coordinates);
  expect(inside.length).toBe(0);
});


test('test tolerance in booleanPointOnLine', () => {
  const start = point([6.853147908594393, 47.03416742221314]);
  const end = point([6.853261929154926, 47.03439258193791]);
  const edge = lineString([
    [
      6.841326,
      47.032517
    ],
    [
      6.841504,
      47.032553
    ],
    [
      6.841777,
      47.032704
    ],
    [
      6.841926,
      47.032789
    ],
    [
      6.842059,
      47.032798
    ],
    [
      6.842291,
      47.032765
    ],
    [
      6.842658,
      47.032604
    ],
    [
      6.84278,
      47.032622
    ],
    [
      6.842959,
      47.032739
    ],
    [
      6.843004,
      47.032944
    ],
    [
      6.843104,
      47.033183
    ],
    [
      6.843808,
      47.033309
    ],
    [
      6.844262,
      47.033387
    ],
    [
      6.8445,
      47.033106
    ],
    [
      6.845014,
      47.033239
    ],
    [
      6.845298,
      47.033369
    ],
    [
      6.845293,
      47.033777
    ],
    [
      6.845155,
      47.034305
    ],
    [
      6.845346,
      47.034739
    ],
    [
      6.845252,
      47.034928
    ],
    [
      6.845091,
      47.035258
    ],
    [
      6.845732,
      47.035526
    ],
    [
      6.846253,
      47.035679
    ],
    [
      6.846562,
      47.035733
    ],
    [
      6.84704,
      47.035825
    ],
    [
      6.847165,
      47.035827
    ],
    [
      6.847629,
      47.035812
    ],
    [
      6.847928,
      47.035855
    ],
    [
      6.848048,
      47.035898
    ],
    [
      6.848444,
      47.036019
    ],
    [
      6.848677,
      47.036132
    ],
    [
      6.848814,
      47.036256
    ],
    [
      6.848678,
      47.036399
    ],
    [
      6.848912,
      47.03656
    ],
    [
      6.849138,
      47.036785
    ],
    [
      6.849247,
      47.037037
    ],
    [
      6.849323,
      47.037342
    ],
    [
      6.849062,
      47.037386
    ],
    [
      6.848784,
      47.037574
    ],
    [
      6.84838,
      47.037815
    ],
    [
      6.848156,
      47.038035
    ],
    [
      6.847937,
      47.03825
    ],
    [
      6.847758,
      47.03845
    ],
    [
      6.847389,
      47.038853
    ],
    [
      6.846968,
      47.039322
    ],
    [
      6.846726,
      47.039544
    ],
    [
      6.84626,
      47.039088
    ],
    [
      6.845848,
      47.038975
    ],
    [
      6.845802,
      47.038993
    ],
    [
      6.845022,
      47.038648
    ],
    [
      6.844031,
      47.038206
    ],
    [
      6.84328,
      47.037899
    ],
    [
      6.842711,
      47.03768
    ],
    [
      6.842347,
      47.03803
    ],
    [
      6.842034,
      47.038274
    ],
    [
      6.841779,
      47.038487
    ],
    [
      6.841886,
      47.03856
    ],
    [
      6.841581,
      47.038806
    ],
    [
      6.843942,
      47.040611
    ],
    [
      6.844582,
      47.041112
    ],
    [
      6.844829,
      47.041515
    ],
    [
      6.845108,
      47.041824
    ],
    [
      6.845229,
      47.041787
    ],
    [
      6.845918,
      47.042305
    ],
    [
      6.846186,
      47.042717
    ],
    [
      6.846531,
      47.043191
    ],
    [
      6.846585,
      47.043168
    ],
    [
      6.846717,
      47.043105
    ],
    [
      6.846919,
      47.043008
    ],
    [
      6.846986,
      47.042976
    ],
    [
      6.847288,
      47.0427
    ],
    [
      6.847636,
      47.042576
    ],
    [
      6.847938,
      47.042334
    ],
    [
      6.848135,
      47.042176
    ],
    [
      6.850109,
      47.041864
    ],
    [
      6.852885,
      47.041435
    ],
    [
      6.857878,
      47.040664
    ],
    [
      6.859322,
      47.040865
    ],
    [
      6.85929,
      47.040291
    ],
    [
      6.85883,
      47.040338
    ],
    [
      6.858898,
      47.039879
    ],
    [
      6.859045,
      47.039471
    ],
    [
      6.859138,
      47.039078
    ],
    [
      6.859047,
      47.038814
    ],
    [
      6.859101,
      47.038651
    ],
    [
      6.859205,
      47.038645
    ],
    [
      6.859284,
      47.038335
    ],
    [
      6.859343,
      47.037936
    ],
    [
      6.859035,
      47.037912
    ],
    [
      6.858712,
      47.037934
    ],
    [
      6.858517,
      47.037897
    ],
    [
      6.858255,
      47.037854
    ],
    [
      6.857729,
      47.03781
    ],
    [
      6.857354,
      47.037698
    ],
    [
      6.857201,
      47.037623
    ],
    [
      6.857075,
      47.037444
    ],
    [
      6.856464,
      47.037137
    ],
    [
      6.856116,
      47.036942
    ],
    [
      6.855255,
      47.036883
    ],
    [
      6.854987,
      47.036891
    ],
    [
      6.854584,
      47.036856
    ],
    [
      6.85411,
      47.03681
    ],
    [
      6.853857,
      47.036589
    ],
    [
      6.853828,
      47.036284
    ],
    [
      6.853884,
      47.036049
    ],
    [
      6.853969,
      47.035705
    ],
    [
      6.853653,
      47.035706
    ],
    [
      6.853323,
      47.035743
    ],
    [
      6.852922,
      47.035797
    ],
    [
      6.85266,
      47.035835
    ],
    [
      6.852276,
      47.035881
    ],
    [
      6.852185,
      47.035941
    ],
    [
      6.851789,
      47.035937
    ],
    [
      6.8519,
      47.035701
    ],
    [
      6.851965,
      47.035376
    ],
    [
      6.852062,
      47.034907
    ],
    [
      6.852179,
      47.034527
    ],
    [
      6.852269,
      47.034287
    ],
    [
      6.852458,
      47.034234
    ],
    [
      6.852739,
      47.034229
    ],
    [
      6.853065,
      47.03419
    ],
    [
      6.853289,
      47.034129
    ],
    [
      6.853526,
      47.034071
    ],
    [
      6.853745,
      47.033981
    ],
    [
      6.854149,
      47.033919
    ],
    [
      6.854493,
      47.033867
    ],
    [
      6.854867,
      47.033802
    ],
    [
      6.855195,
      47.033732
    ],
    [
      6.85542,
      47.033611
    ],
    [
      6.855644,
      47.033488
    ],
    [
      6.855771,
      47.033341
    ],
    [
      6.856028,
      47.033072
    ],
    [
      6.855067,
      47.032578
    ],
    [
      6.854661,
      47.032268
    ],
    [
      6.854192,
      47.031949
    ],
    [
      6.853673,
      47.031572
    ],
    [
      6.853339,
      47.030751
    ],
    [
      6.85316,
      47.030469
    ],
    [
      6.853133,
      47.030222
    ],
    [
      6.853052,
      47.030227
    ],
    [
      6.852755,
      47.030286
    ],
    [
      6.852716,
      47.029867
    ],
    [
      6.852575,
      47.029607
    ],
    [
      6.85191,
      47.029609
    ],
    [
      6.851354,
      47.029576
    ],
    [
      6.850745,
      47.029131
    ],
    [
      6.850241,
      47.028911
    ],
    [
      6.849641,
      47.029045
    ],
    [
      6.849252,
      47.02935
    ],
    [
      6.849255,
      47.02968
    ],
    [
      6.849258,
      47.02985
    ],
    [
      6.848802,
      47.029984
    ],
    [
      6.848129,
      47.030177
    ],
    [
      6.847499,
      47.030214
    ],
    [
      6.847134,
      47.029821
    ],
    [
      6.847059,
      47.029647
    ],
    [
      6.846005,
      47.029694
    ],
    [
      6.84562,
      47.029769
    ],
    [
      6.845178,
      47.029841
    ],
    [
      6.845033,
      47.029874
    ],
    [
      6.844499,
      47.029959
    ],
    [
      6.844134,
      47.030033
    ],
    [
      6.843653,
      47.030139
    ],
    [
      6.843222,
      47.030526
    ],
    [
      6.842826,
      47.031076
    ],
    [
      6.842511,
      47.031561
    ],
    [
      6.842165,
      47.031531
    ],
    [
      6.841853,
      47.031469
    ],
    [
      6.841681,
      47.031916
    ],
    [
      6.841326,
      47.032517
    ]
  ]);

  const startOnEdge = booleanPointOnLine(start, edge, { epsilon: 1e-8 });
  const endOnEdge = booleanPointOnLine(end, edge, { epsilon: 1e-8 });

  expect(startOnEdge).toEqual(true);
  expect(endOnEdge).toEqual(false);
});